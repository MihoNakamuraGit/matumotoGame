
--------------------------------------------------------------------------------------------------------------------------------------------
【コンピューター】
		・各種ハードウェア (マザーボード、電源)
		・CPU (コア、レジスタ、キャッシュ)
		・システムメモリ
		・ストレージ (HDD、SSD、フラッシュメモリ)
		・GPU (シェーダーユニット)
		・ビデオメモリ
		・周辺機器 (ディスプレイ、キーボード、マウス)
		・オペレーティングシステム(OS)の役割
		・ディレクトリ階層 (フォルダ、アクセス権)
		・情報量の単位 (ビット、バイト)
		・クリップボード (切り取り、コピー、貼り付け)
		・パス文字列 (絶対パス、相対パス)
		・環境変数
		・レジストリ
		・プロセス (スレッド、サービス)
		・ネットワーク機器 (ルーター、ゲートウェイ、スイッチングHUB、LAN、WAN)
		・ネットワークプロトコル (TCP、UDP、IP、IPアドレス、ポート番号、http、ftp)
		・ピクセル (カラーフォーマット、光の三原色RGB)
		・基数 (2進数、8進数、10進数、16進数)
		・ゲームエンジン (Unity、UnrealEngine、ツクール)
		・便利なアプリ(Windows)
		・ファイルフォーマット

--------------------------------------------------------------------------------------------------------------------------------------------
【C言語】

	＜言語の特徴＞
		・特徴 (高級言語、バージョン、フリーフォーマット、コンパイル方式)
		・他のプログラミング言語と何が違うのか？ (実行速度、安全性、可読性、拡張性)
		・どのような業界で使われているのか？

	＜文法＞
		・予約語
		・リテラル (数値、文字、文字列)
		・データ型 (修飾子、記憶子)
		・識別名 (命名規則)
		・変数 (宣言、初期化、代入、アドレス、ローカル、グローバル、静的)
		・スコープと寿命
		・演算子 (四則演算、代入、比較、論理、ビット、その他)
		・制御文 (条件式、単分岐、多分岐、反復、その他)
		・関数 (定義、呼び出し、プロトタイプ宣言、仮引数、実引数)
		・配列 (1次元配列、2次元配列、要素、初期化)
		・文字列 (終端文字)
		・ポインタ (間接参照)
		・列挙型 (列挙子、値の指定)
		・構造体 (メンバ、ビットフィールド、アラインメント、パディング)
		・共用体 (メンバ)
		・可変個引数 (va_list)
　　　　　
　　　＜Cランタイムライブラリ (CRT)＞
		・数学系
		・文字列処理
		・ファイル入出力
		・メモリ
		・スレッド
　　　　　
　　　＜応用＞
		・値渡しとアドレス渡し
　　　  ・メモリの動的確保と解放
　　　  ・ShallowコピーとDeepコピー
		・再帰処理
		・ソースファイル分割 (ヘッダーファイル)
		・プリコンパイルヘッダー
		・スタティックリンクライブラリの作成と利用 (.lib)
		・ダイナミックリンクライブラリの作成と利用 (.dll)
		・インポートライブラリ (.lib)
		・実行可能ファイル (.exe)
		・外部ライブラリの利用
　　　　　
　　　　　
--------------------------------------------------------------------------------------------------------------------------------------------
【C++言語】
　　　　　
	＜言語の特徴＞
		・特徴 (バージョン)
		・C言語と何が違うのか？
		・どのような業界で使われているのか？

	＜文法＞
		・予約語
		・データ型 (bool型)
		・型推論 (auto)
		・演算子 (new、delete)
		・参照
		・デフォルト引数 (デフォルト値、実引数の省略)
		・演算子のオーバーロード
		・関数のオーバーロード
		・インライン関数
		・クラス (メンバ変数、メンバ関数)
		・アクセス指定子
		・コンストラクタ (デフォルト、コピー、ムーブ)
		・デストラクタ (仮想デストラクタ)
		・thisコール (thisポインタ)
		・継承 (基底クラス、派生クラス、単一継承、多重継承、仮想継承)
		・オーバーライド
		・仮想関数 (オーバーライド可能なメンバ関数)
		・純粋仮想関数 (オーバーライドの強制)
		・テンプレート (関数テンプレート、クラステンプレート)
		・テンプレートの特殊化 (完全特殊化、部分特殊化)
		・可変個テンプレート引数
		・右辺値参照 (std::move、std::forward)
		・名前空間
		・using指令
		・using宣言
		・プレースメントnew
		・ラムダ式
		・例外処理

	＜C++標準テンプレートライブラリ (STL)＞
		・コンテナ (可変長配列、双方向リスト、スタック、キュー、連想配列)
		・アルゴリズム (交換、コピー、イテレーター)
		・入出力ストリーム (std::istream、std::ifstream、std::ostream、std::ofstream、std::memstream、std::strstream)
		・関数オブジェクト (std::function)
		・時間 (std::chrono)
		・スレッド (std::thread)

	＜応用＞
		・参照渡し
		・カプセル化
		・多態性
		・汎化と特化
		・抽象クラスと具象クラス
		・インターフェイスクラス
		・ダイヤモンド継承問題
		・コンストラクタ内の不完全オブジェクト問題
		・デストラクタのメモリリーク問題
		・IUnknown (参照カウント、寿命管理)
　　　
--------------------------------------------------------------------------------------------------------------------------------------------
【プリプロセッサ】
		・ディレクティブ (#で始まる命令)
		・インクルード (#include)
		・多重インクルード問題
		・多重インクルード防止 (#pragma once)
		・循環インクルード問題
		・警告の無効化/有効化 (#pragma warning)
		・アラインメントの変更 (#pragma align)
		・シンボル定義 (#define)
		・置換マクロ (#define)
		・関数マクロ (#define)
        ・分岐 (#if、#else、#elif、#endif)
　　　
--------------------------------------------------------------------------------------------------------------------------------------------
【データ構造】
		・ベクタ (可変長配列)      std::vector
		・単方向リスト             std::forward_list
		・双方向リスト             std::list
		・循環リスト               STLに該当なし
		・マップ (連想配列)        std::unordered_map (旧std::map)
		・セット (集合)            std::unordered_set (旧std::set)
		・スタック (先入れ後出し)  std::stack
		・キュー (先入れ先出し)    std::queue
		・ツリー (多分木)          STLに該当なし
		・無向グラフ               STLに該当なし
		・有向グラフ               STLに該当なし

--------------------------------------------------------------------------------------------------------------------------------------------
【アルゴリズム】
		・交換
		・線形探索
		・二分探索
		・木探索 (深さ優先探索、幅優先探索、行きがけ順、通りがけ順、帰りがけ順)
		・ハッシュ法 (ハッシュ関数、ハッシュ値)
		・経路探索 (ダイクストラ法、A*)   最短経路を探す
		・ソート (バブル、クイック、安定ソート、不安定ソート)
		・文字列処理 (検索、置換、抽出)
		・乱数生成 (疑似乱数、メルセンヌツイスター)

--------------------------------------------------------------------------------------------------------------------------------------------
【デザインパターン (合計23種)】

	＜作成に関するパターン＞
		・Singleton (シングルトン)
		・Factory (ファクトリー)
		・Builder (ビルダー)
		
	＜構造に関するパターン＞
		・Composite (コンポジット)
		・Bridge (ブリッジ)

	＜振る舞いに関するパターン＞
		・Chain of responsibility (チェイン)

	＜に関するパターン＞
		・Prototype (プロトタイプ)
		・State (ステート)
		・Command (コマンド)
		・Adapter (アダプター)
		・Visitor (ビジター)
		・Facade (ファサード)
		
--------------------------------------------------------------------------------------------------------------------------------------------
【数学】

	＜初等数学＞
		・四則演算
		・平方根 (n乗根)
		・絶対値
		・方程式 (連立方程式、不等式)
		・角度 (度数法、弧度法)
		・三角関数 (直角三角形、単位円、三角関数の公式、逆三角関数)

	＜線形代数＞
		・ベクトル (2次元、3次元、4次元、加法、減法、実数倍、内積、外積、射影、成す角)
		・行列 (行列の型、成分、単位行列、零行列、乗法、転置、逆行列、非可換性)
		・一次変換 (行列によるベクトルの変換、アフィン変換)

--------------------------------------------------------------------------------------------------------------------------------------------
【物理学】

	＜初等力学＞
	    ・物理量の単位 (長さ、重さ、速度、加速度、角速度、質量、力、エネルギー)
		・等速直線運動 (速度)
		・等加速度運動 (加速度、自由落下、空気抵抗、終端速度)
		・放物運動 (初速度、重力加速度、水平方向、鉛直方向)
		・仕事
		・ニュートンの法則 (慣性、F=ma、作用反作用)
		・摩擦力 (摩擦係数、静止摩擦力、動摩擦力)
		・力積
		・運動量による衝突モデル (完全弾性、完全非弾性)
		・エネルギー (位置エネルギー、運動エネルギー、保存則)
		・反射 (入射角、反射角、全反射)
		・屈折 (屈折率、屈折角)
		・円運動 (角速度、遠心力、向心力、モーメント)

--------------------------------------------------------------------------------------------------------------------------------------------
【チーム制作】
		・企画書作成
		・仕様書作成
		・作業項目出し
		・作業分担
		・作業時間見積もり
		・打ち合わせ
		・スケジューリング
		・マイルストーン (途中経過発表)

--------------------------------------------------------------------------------------------------------------------------------------------
【バージョン管理】
		・Git (分散型バージョン管理システム)
		・Gitサーバー (ローカルマシン、GitHub、GitLab、Bitbucket)
        ・Gitクライアント (GitHubDesktop、SourceTree、Tortoise Git)

--------------------------------------------------------------------------------------------------------------------------------------------
【Windowsアプリケーション】
		・動作原理 (イベント駆動方式)
		・ウィンドウの各部名称 (クライアント領域、非クライアント領域、キャプション、フレーム)
		・ウィンドウの作成
		・ウィンドウメッセージ
		・ウィンドウプロシージャ
		・クライアント座標系
		・スクリーン座標系

--------------------------------------------------------------------------------------------------------------------------------------------
【DirectX 12】

	＜グラフィックス＞
		・スワップチェーン (バックバッファ、フロントバッファ)
		・ティアリング対策 (ダブルバッファリング、トリプルバッファリング)
		
		・D3D12デバイス (機能レベル、リソース作成機能)

		・プリミティブトポロジー (原始図形「点」「線」「三角形」)
        ・頂点 (プリミティブを構成する点)
		・頂点要素 (位置、法線ベクトル、接ベクトル、頂点カラー、テクスチャ座標、ブレンディング情報)

		・頂点バッファ (頂点配列、頂点ストライド)
		・頂点バッファビュー

		・インデックスバッファ (頂点インデックス、ストリップカット値)
		・インデックスバッファビュー

		・定数バッファ (変換行列、ライト、マテリアル、その他)
		・定数バッファビュー

		・シェーダーリソース (テクスチャ、アルベドマップ、法線マップ)
		・シェーダーリソースビュー
		・マルチテクスチャ

		・レンダーターゲット (書き込み先、バックバッファ、テクスチャ)
		・レンダーターゲットビュー
		・マルチレンダーターゲット

		・深度ステンシルバッファ (深度テスト、ステンシルテスト、比較関数)
		・深度ステンシルバッファビュー

		・ディスクリプタ (リソース詳細情報)
		・ディスクリプタヒープ (ディスクリプタ配列)
		
		・ルートシグネチャ
		・ルートパラメーター (ルートディスクリプタ、ディスクリプタテーブル)
		・ディスクリプタテーブル
		・ディスクリプタレンジ
		・スタティックサンプラー
		
		・グラフィックスパイプラインステート
		・入力レイアウト (セマンティック、データフォーマット、入力スロット)
		・シェーダーバイトコード (コンパイル済みシェーダー)
		・ブレンドステート (ブレンド計算式)
		・ラスタライザステート
		・出力マージャー

		・コマンドキュー (Direct、Compute、Copy)
		・コマンドアロケーター (GPUコマンド用のメモリ領域割り当て)
		・コマンドリスト (GPUコマンドの蓄積)
		・バンドル (GPUコマンドのグループ化と再利用)

		・ドローコール (インデックスなし、インデックス付き)
		・プレゼント (レンダリング終了、ディスプレイへの転送開始)
		・フェンス (フェンス値、GPUとの同期)
		・通知イベント (フェンス到達の通知)

		・高レベルシェーダー言語 (HLSL、シェーダーモデル)
		・HLSL組み込み関数
		・シェーダーレジスタ (bレジスタ、cレジスタ、sレジスタ、tレジスタ)
		・レジスタ空間
		・頂点シェーダー (頂点データの加工)
		・ハルシェーダー (ポリゴン分割計画)
		・ドメインシェーダー (コントロールポイント)
		・ジオメトリシェーダー (頂点の増減)
		・ピクセルシェーダー (頂点間補間、テクスチャサンプリング、出力、ピクセル破棄)
		・コンピュートシェーダー (汎用演算)

        ・モデル空間 (オブジェクト空間)
		・ワールド空間 (ワールド変換、アフィン変換)
		・ビュー空間 (ビュー変換)
		・プロジェクション空間 (プロジェクション変換、正射影、透視射影)
		・正規化デバイス空間 (同次座標w)
		・ビューポート空間 (ビューポート変換)

        ・ローカル空間 (親ノード基準の空間)
        ・接空間 (法線ベクトル、接ベクトル、従法線ベクトル)
		
	＜インプット＞
		・XInputライブラリ (旧DirectInputコンポーネント)
		・入力データ更新


	＜オーディオ＞
		・オーディオファイルフォーマット (wav、ogg、mp3)
	    ・PCM (音波のデジタル化、サンプリング周波数、量子化ビット数、チャンネル数)
		・XAudio2ライブラリ (旧DirectSoundコンポーネント)
		・XAudio2ボイス (マスタリングボイス、サブミックスボイス、ソースボイス)
		・再生 (同時再生、ループ再生、ピッチ変更、ボリューム変更)
		・オンメモリ再生
		・ストリーミング再生
		・エフェクト (リバーブ、エコー)
		・3D (音源、リスナー、定位、パンニング)
		・カテゴリ (背景音、効果音、音声)

	＜マルチメディア＞
		・DirectShow (動画再生)
		

--------------------------------------------------------------------------------------------------------------------------------------------
【ゲーム開発技法】

	＜2D/3D共通＞
		・時分割型プログラミング
		・イベントドリブンとポーリング
		・更新と描画
		・データとロジックの分離
		・PC/NPC管理
		・有限状態マシン
		・リソース管理
		・メモリ管理 (フラグメンテーション)
		・参照カウント方式
		・フラグ管理
		・イベント管理
		・カメラ (基本、フリー、定点、固定、正射影、透視射影)
		・シーングラフ
		・シーン遷移
		・セーブ(シリアライズ)とロード(デシリアライズ)
		・ユーザーインターフェイス (UI)
		・パーティクル
		・マルチスレッド (並列処理)
		・同期処理 (クリティカルセクション、ミューテックス、セマフォ)
		・ソケット通信 (TCP/IP、UDP)
		・パケット (送信データ単位 1Packet = 256B)

	＜2D＞
		・タイルベースマップ
		・2Dカメラ
		・背景スクロール
		・テクスチャの読み込み
		・テクスチャマッピング
		・スプライト
		・2Dアニメーション
			> スプライトアニメーション
			> ボーンアニメーション
		・ビジュアルエフェクト
		・衝突検知 (円、矩形、ビットマップ)

	＜3D＞
		・ライト (平行光源、点光源、スポットライト)
		・マテリアル (環境反射、拡散反射、鏡面反射、自己発光、テクスチャ)
		・ライティング (フラット、グーロー、ランバート、フォン)
		・カリング (フェイス、フラスタム、オクルージョン)
		・衝突検知 (球、ボックス、カプセル、メッシュ、光線)
		・3Dモデルデータの読み込み
		・トゥーンレンダリング (アニメ調表現、輪郭線)
		・モーフィング (頂点アニメーション)
		・アニメーションデータの読み込み (キーフレーム)
		・ボーンアニメーション (キーフレーム補間)
		・スキニング処理 (ボーン、頂点ウェイト、頂点ブレンディング、行列パレット)
		・逆運動学 (IK)
		・ポストエフェクト (グレア、ブルーム、トーンマッピング、被写界深度)


--------------------------------------------------------------------------------------------------------------------------------------------
【ゲームエンジン】
		・ゲームオブジェクト (コンポーネントのコンテナ)
		・コンポーネント (ゲームオブジェクトの振る舞いを決定するもの)
		・コライダー (衝突検知用オブジェクト)
		・リジッドボディ (剛体、ダイナミクス)
		・スプライトレンダラー
		・メッシュレンダラー
		・有限状態マシン (状態、トリガー、遷移)
		・シーン
		・キー入力 (キーバインド)







