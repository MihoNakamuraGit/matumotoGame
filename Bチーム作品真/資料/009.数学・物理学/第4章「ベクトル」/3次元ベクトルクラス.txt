
//------------------------------------------------------------------------
//
// 3次元ベクトル(x,y,z)を表すクラス
//   ・DirectX::XMFLOAT3 は構造体なので何となく扱い難い。
//   ・クラスにすることで出来ることが明確になる。
//   ・使用頻度の高い演算だけを実装して見通しを良くしたい。
//   ・Unityっぽい感じに。
//
//------------------------------------------------------------------------
class Vector3 : DirectX::XMFLOAT3
{
public:
    static const 零ベクトル;
    static const 壱ベクトル;
    static const 前方向;
    static const 後方向;
    static const 右方向;
    static const 左方向;
    static const 上方向;
    static const 下方向;
    
public:
    float x;
    float y;
    float z;

public:
    コンストラクタ();
    コンストラクタ(x, y, z);
    コンストラクタ(2次元ベクトル, z);
    コンストラクタ(3次元ベクトル);
    
    代入(x, y, z);
	演算子 +();
	演算子 -();
	演算子 +=(ベクトル);
	演算子 -=(ベクトル);
	演算子 *=(スカラー);
	演算子 /=(スカラー);

    static 加法();
    static 減法();
    static スカラー倍();
    static 内積();
    static 外積();
    static 長さ();
    static 長さの2乗();
    static 正規化();
    static 逆ベクトル();
    static 変換();
    static 成す角();
    static 2点間距離();
    static 最大値ベクトル();
    static 最小値ベクトル();
    static 射影();
    static 線形補間();
};


//------------------------------------------------------------------------
//  演算子のオーバーロードを定義しておくと便利。
//  クラスの外側で定義しよう。
//------------------------------------------------------------------------
演算子 +(ベクトル, ベクトル);
演算子 -(ベクトル, ベクトル);
演算子 *(ベクトル, スカラー);
演算子 *(スカラー, ベクトル);
演算子 /(ベクトル, スカラー);



